let walls = [];

// Set up canvas
function setup() {
  createCanvas(1200, 800);
  car.position = createVector(width / 2, height / 2); // Set initial position of car to center of canvas
  car.velocity = createVector(0, 0); // Set initial velocity of car to 0
  car.acceleration = createVector(0, 0); // Set initial acceleration of car to 0
}

// Define car object
let car = {
  position: null,
  velocity: null,
  acceleration: null,
  maxSpeed: 5,
  size: 20,
  color: 'blue',
};

// Define circuit object
let circuit = {
  vertices: [], // Array to store vertices of the circuit
  lines: [], // Array to store lines connecting the vertices
  color: 'grey',
};

// Draw circuit
function drawCircuit() {
  fill(circuit.color);
  beginShape();
  for (let i = 0; i < circuit.vertices.length; i++) {
    vertex(circuit.vertices[i].x, circuit.vertices[i].y);
  }
  for (let i = 0; i < circuit.vertices.length; i++) {
    vertex(walls[i], walls[i]);
  }
  endShape(CLOSE);

  // Draw lines connecting vertices
  stroke('black');
  for (let i = 0; i < circuit.lines.length; i++) {
    let v1 = circuit.vertices[circuit.lines[i].start];
    let v2 = circuit.vertices[circuit.lines[i].end];
    line(v1.x, v1.y, v2.x, v2.y);
  }
}

// Draw car
function drawCar() {
  fill(car.color);
  rectMode(CENTER);
  rect(car.position.x, car.position.y, car.size, car.size);
}

// Update car position, velocity, and acceleration
function updateCar() {
  car.position.add(car.velocity);
  car.velocity.add(car.acceleration);
  car.velocity.limit(car.maxSpeed);
  car.acceleration.mult(0);
}

// Apply steering force to car
function steerCar(angle) {
  let steering = p5.Vector.fromAngle(angle);
  steering.mult(0.1);
  car.acceleration.add(steering);
}

// Check if car is inside circuit
function checkBoundary() {
  let inside = false;
  for (let i = 0, j = circuit.vertices.length - 1; i < circuit.vertices.length; j = i++) {
    let xi = circuit.vertices[i].x,
      yi = circuit.vertices[i].y;
    let xj = circuit.vertices[j].x,
      yj = circuit.vertices[j].y;
    let intersect =
      yi > car.position.y != yj > car.position.y &&
      car.position.x < ((xj - xi) * (car.position.y - yi)) / (yj - yi) + xi;
    if (intersect) inside = !inside;
  }
  return inside;
}

// Main draw function
function draw() {
  background(220);
  drawCircuit();
  drawCar();
  updateCar();

  // Check for boundary collision
  if (!checkBoundary()) {
    car.color = 'red'; // Change car color to red if outside the circuit
  } else {
    car.color = 'blue'; // Change car color back to blue if inside the circuit
  }
}

// Add vertices and lines to circuit on mouse click
function mouseClicked() {
  let vertexIndex = circuit.vertices.length;
  let lineIndex = circuit.lines.length;
  let newVertex = createVector(mouseX, mouseY);
  circuit.vertices.push(newVertex);
  if (vertexIndex > 0) {
    // Create a line connecting the newly added vertex with the previous vertex
    let newLine = {
      start: vertexIndex - 1,
      end: vertexIndex,
    };
    circuit.lines.push(newLine);
  }
}

walls.push(new Boundary(623, 47, 323, 37));
    walls.push(new Boundary(323, 37, 173, 62));
    walls.push(new Boundary(173, 62, 65, 99));
    walls.push(new Boundary(65, 99, 34, 173));
    walls.push(new Boundary(34, 173, 22, 317));
    walls.push(new Boundary(22, 317, 29, 408));
    walls.push(new Boundary(29, 408, 70, 580));
    walls.push(new Boundary(70, 580, 120, 700));
    walls.push(new Boundary(120, 700, 181, 739));
    walls.push(new Boundary(181, 739, 426, 751));
    walls.push(new Boundary(426, 751, 610, 754));
    walls.push(new Boundary(610, 754, 800, 755));
    walls.push(new Boundary(800, 755, 959, 755))
    walls.push(new Boundary(959, 755, 1110, 654));
    walls.push(new Boundary(1110, 654, 1160, 596));
    walls.push(new Boundary(1160, 596, 1180, 454));
    walls.push(new Boundary(1180, 454, 1160, 346));
    walls.push(new Boundary(1160, 346, 1100, 297));
    walls.push(new Boundary(1100, 297, 950, 280));
    walls.push(new Boundary(950, 280, 748, 380));    
    walls.push(new Boundary(748, 380, 591, 428));
    walls.push(new Boundary(591, 428, 591, 421));
    walls.push(new Boundary(591, 421, 649, 390));
    walls.push(new Boundary(649, 390, 739, 350));
    walls.push(new Boundary(739, 350, 795, 320));
    walls.push(new Boundary(795, 320, 920, 242));
    walls.push(new Boundary(920, 242, 950, 180));
    walls.push(new Boundary(950, 180, 955, 155));
    walls.push(new Boundary(955, 155, 956, 101));
    walls.push(new Boundary(956, 101, 916, 47));
    walls.push(new Boundary(916, 47, 858, 26));
    walls.push(new Boundary(858, 26, 623, 47)); //Einde buitenbaan
    walls.push(new Boundary(623, 137, 323, 137));
    walls.push(new Boundary(323, 137, 183, 162));
    walls.push(new Boundary(183, 162, 155, 179));
    walls.push(new Boundary(155, 179, 120, 250));
    walls.push(new Boundary(120, 250, 105, 350));
    walls.push(new Boundary(105, 350, 160, 575));
    walls.push(new Boundary(160, 575, 220, 655));
    walls.push(new Boundary(220, 655, 314, 665));
    walls.push(new Boundary(314, 665, 932, 655));
    walls.push(new Boundary(932, 655, 1050, 587));
    walls.push(new Boundary(1050, 587, 1081, 476));
    walls.push(new Boundary(1081, 476, 1066, 379));
    walls.push(new Boundary(1066, 379, 981, 370));
    walls.push(new Boundary(981, 370, 792, 450));
    walls.push(new Boundary(792, 450, 675, 512));
    walls.push(new Boundary(675, 512, 509, 529));
    walls.push(new Boundary(509, 529, 411, 497));
    walls.push(new Boundary(411, 497, 411, 422));
    walls.push(new Boundary(411, 422, 462, 380));
    walls.push(new Boundary(462, 380, 576, 308));
    walls.push(new Boundary(576, 308, 663, 260));
    walls.push(new Boundary(663, 260, 730, 226));
    walls.push(new Boundary(730, 226, 781, 196));
    walls.push(new Boundary(781, 196, 844, 161));
    walls.push(new Boundary(844, 161, 845, 145));
    walls.push(new Boundary(845, 145, 623, 137));